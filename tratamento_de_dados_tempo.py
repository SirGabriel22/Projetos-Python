# -*- coding: utf-8 -*-
"""Tratamento_de_dados_tempo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YYstdjWRRnyLXCqqdD1qTQi3F__dXrSV
"""

import pandas as pd
import seaborn as sbn
import statistics as sts

"""Com a biblioteca "pandas", visualizamos os dados de forma tabular, ou seja, como se fosse uma matriz.
Com a biblioteca "seaborn", faremos gráficos dos dados recebidos.
Por fim, com a biblioteca "statistics", faremos operações estatísticas básicas e a utilizaremos também para subsitituir outliers pela mediana, como veremos adiante.

Inicialmente, vamos ler o arquivo "tempo.csv" e deduzir os seus dados.
"""

# importação
dataset = pd.read_csv("tempo.csv", sep = ";")
# visualização dos dados
dataset.head()

"""Como primeiro passo do tratamento, corrigiremos os dados qualitativos."""

"""Visualização do tamanho da matriz de dados"""
dataset.shape
# 14 linhas e 5 colunas.
"""Lembrando: cada coluna se chama 'atributo'"""

agrupado = dataset.groupby(['Aparencia']).size()
agrupado

"""Vemos que a moda ocorre em dois atributos. Vamos substituir pelo padrão do sistema."""

agrupado = dataset.groupby(['Vento']).size()
agrupado

"""Não há outliers."""

agrupado = dataset.groupby(['Jogar']).size()
agrupado

"""Também não há  outliers

Agora, vamos para a análise de dados quantitativos.
"""

dataset["Temperatura"].describe()

"""Cabe observar:
- Não há dados textuais
- A mediana é bem maior que a média, então vamos ter que substituir calculando o desvio padrão
- A temperatura máxima é de 1220°F, o que deve ser substituído.
"""

sbn.boxplot(dataset['Temperatura']).set_title("Temperatura")

sbn.distplot(dataset['Temperatura']).set_title("Temperatura")

"""Os gráficos não apresentam outliers. Vamos a outras checagens."""

dataset['Umidade'].describe()

"""Cabe observar:
- Foram totalizados 13 elementos, ou seja, há um valor não atribuído.
- A média está próxima da mediana, então não será necessário substituir calculando o desvio padrão
- A umidade máxima é de 200%, o que deve ser substituído.
"""

agrupado = dataset.groupby(['Umidade']).size()
agrupado

"""Não há dados textuais."""

agrupado = dataset.groupby(['Temperatura']).size()
agrupado

"""Também não há dados textuais.

Para a substituição dos dados, utilizaremos o seguinte padrão:


*   Dados qualitativos: moda (isso é, os dados com maior ocorrência)
*   Dados quantitativos: mediana (ou seja, valor central de um conjunto de dados ordenados)

## PRIMEIRA ETAPA DE SUBSTITUIÇÃO:
Substituiremos, primeiramente, os dados qualitativos. Faremos isso a partir dos atributos mais à esquerda da tabela.
"""

# Checagem de N/As totais
dataset.isnull().sum()

"""Há apenas dois N/As totais. Um de atributo qualitativo e outro de atributo quantitativo. Faremos o preenchimento deles mais adiante."""

# Cálculo da moda no atributo Aparencia:
moda = sts.mode(dataset['Aparencia'])
moda
# A moda é 'sol'. Agora, vamos substituir:
dataset.loc[dataset['Aparencia'] == 'menos', 'Aparencia'] = moda
print(dataset.groupby(['Aparencia']).size())
#Substituição feita com sucesso!.

"""Primeira etapa já resolvida. Vamos à segunda etapa."""

print(dataset['Vento'].isnull().sum())
# Como visto anteriormente, só há um N/A. Vamos calcular a moda para preencher.
moda = sts.mode(dataset['Vento'])
moda
# A moda é "FALSO". Vamos substituir:
dataset['Vento'].fillna('FALSO', inplace = True)
dataset['Vento'].isnull().sum()
# Não há mais N/A. Vamos checar como ficou a coluna
print(dataset.groupby(['Vento']).size())
# Deu certo.

"""Agora, vamos pra substituição do último dado qualitativo:"""

print(dataset['Jogar'].isnull().sum())
# Não há N/A e nem outliers, então não há nada a ser feito aqui.

"""## SEGUNDA ETAPA DE SUBSTITUIÇÃO:
Agora, substituiremos os dados quantitativos. Começaremos pela coluna "Temperatura", pois não há N/A.
"""

dataset['Temperatura'].describe()
# Vamos definir como critério o que foi pedido: A temperatura tem que ser entre -130°F e 130°F
dataset.loc[(dataset['Temperatura'] < -130) | (dataset['Temperatura'] > 130)]
# Há um registro dessa ocorrência.
mediana = sts.median(dataset['Temperatura']) # Lembrete: a mediana é menos sujeita a outliers!
mediana # A mediana é de 73.5°F
dataset.loc[(dataset['Temperatura'] < -130) | (dataset['Temperatura'] > 130)] = mediana
dataset.loc[(dataset['Temperatura'] < -130) | (dataset['Temperatura'] > 130)]
# Não há valores fora desse domínio. Agora, vamos fazer a checagem geral:
dataset["Temperatura"].describe()
# A média está num valor aproximado em relação à mediana. Nada mais a se fazer.

"""Agora, vamos ao último tratamento de dados:"""

dataset['Umidade'].describe()
# Utilizaremos o mesmo critério: 0 < umidade < 100%
dataset.loc[(dataset['Umidade'] < 0) | (dataset['Umidade'] > 100)]
# Há um registro dessa ocorrência.
mediana = sts.median(dataset['Umidade'])
mediana # A mediana é de 82.5%.
dataset['Umidade'].fillna(mediana, inplace = True)
dataset['Umidade'].isnull().sum() # Não tem mais N/A. Vamos, agora, substituir o valor mais discrepante.
print(dataset.groupby(['Umidade']).size())
dataset.loc[(dataset['Umidade'] < 0) | (dataset['Umidade'] > 100)] = mediana
dataset['Umidade'].describe() # Deu certo!